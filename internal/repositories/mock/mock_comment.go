// Code generated by MockGen. DO NOT EDIT.
// Source: comment.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"
	models "together-backend/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockCommentRepo is a mock of CommentRepo interface.
type MockCommentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepoMockRecorder
}

// MockCommentRepoMockRecorder is the mock recorder for MockCommentRepo.
type MockCommentRepoMockRecorder struct {
	mock *MockCommentRepo
}

// NewMockCommentRepo creates a new mock instance.
func NewMockCommentRepo(ctrl *gomock.Controller) *MockCommentRepo {
	mock := &MockCommentRepo{ctrl: ctrl}
	mock.recorder = &MockCommentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentRepo) EXPECT() *MockCommentRepoMockRecorder {
	return m.recorder
}

// CountCommentsByEventId mocks base method.
func (m *MockCommentRepo) CountCommentsByEventId(eventId int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCommentsByEventId", eventId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountCommentsByEventId indicates an expected call of CountCommentsByEventId.
func (mr *MockCommentRepoMockRecorder) CountCommentsByEventId(eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCommentsByEventId", reflect.TypeOf((*MockCommentRepo)(nil).CountCommentsByEventId), eventId)
}

// CreateComment mocks base method.
func (m *MockCommentRepo) CreateComment(userId, eventId int, content string) (*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", userId, eventId, content)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentRepoMockRecorder) CreateComment(userId, eventId, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentRepo)(nil).CreateComment), userId, eventId, content)
}

// DeleteComment mocks base method.
func (m *MockCommentRepo) DeleteComment(comment *models.Comment) (*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", comment)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentRepoMockRecorder) DeleteComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentRepo)(nil).DeleteComment), comment)
}

// GetComment mocks base method.
func (m *MockCommentRepo) GetComment(commentId, userId, eventId int) (*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", commentId, userId, eventId)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment.
func (mr *MockCommentRepoMockRecorder) GetComment(commentId, userId, eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockCommentRepo)(nil).GetComment), commentId, userId, eventId)
}

// GetCommentsByEventId mocks base method.
func (m *MockCommentRepo) GetCommentsByEventId(eventId, size, page int) ([]models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByEventId", eventId, size, page)
	ret0, _ := ret[0].([]models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByEventId indicates an expected call of GetCommentsByEventId.
func (mr *MockCommentRepoMockRecorder) GetCommentsByEventId(eventId, size, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByEventId", reflect.TypeOf((*MockCommentRepo)(nil).GetCommentsByEventId), eventId, size, page)
}
