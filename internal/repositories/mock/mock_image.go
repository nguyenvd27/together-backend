// Code generated by MockGen. DO NOT EDIT.
// Source: image.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"
	models "together-backend/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockImageRepo is a mock of ImageRepo interface.
type MockImageRepo struct {
	ctrl     *gomock.Controller
	recorder *MockImageRepoMockRecorder
}

// MockImageRepoMockRecorder is the mock recorder for MockImageRepo.
type MockImageRepoMockRecorder struct {
	mock *MockImageRepo
}

// NewMockImageRepo creates a new mock instance.
func NewMockImageRepo(ctrl *gomock.Controller) *MockImageRepo {
	mock := &MockImageRepo{ctrl: ctrl}
	mock.recorder = &MockImageRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRepo) EXPECT() *MockImageRepoMockRecorder {
	return m.recorder
}

// DeleteImageByEventId mocks base method.
func (m *MockImageRepo) DeleteImageByEventId(eventId int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageByEventId", eventId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImageByEventId indicates an expected call of DeleteImageByEventId.
func (mr *MockImageRepoMockRecorder) DeleteImageByEventId(eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageByEventId", reflect.TypeOf((*MockImageRepo)(nil).DeleteImageByEventId), eventId)
}

// GetImageByUrl mocks base method.
func (m *MockImageRepo) GetImageByUrl(url string) (models.EventImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageByUrl", url)
	ret0, _ := ret[0].(models.EventImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageByUrl indicates an expected call of GetImageByUrl.
func (mr *MockImageRepoMockRecorder) GetImageByUrl(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageByUrl", reflect.TypeOf((*MockImageRepo)(nil).GetImageByUrl), url)
}
