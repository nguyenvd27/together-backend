// Code generated by MockGen. DO NOT EDIT.
// Source: user_event.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"
	models "together-backend/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockUserEventRepo is a mock of UserEventRepo interface.
type MockUserEventRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserEventRepoMockRecorder
}

// MockUserEventRepoMockRecorder is the mock recorder for MockUserEventRepo.
type MockUserEventRepoMockRecorder struct {
	mock *MockUserEventRepo
}

// NewMockUserEventRepo creates a new mock instance.
func NewMockUserEventRepo(ctrl *gomock.Controller) *MockUserEventRepo {
	mock := &MockUserEventRepo{ctrl: ctrl}
	mock.recorder = &MockUserEventRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserEventRepo) EXPECT() *MockUserEventRepoMockRecorder {
	return m.recorder
}

// AddUserToEvent mocks base method.
func (m *MockUserEventRepo) AddUserToEvent(userId, eventId int) (*models.UserEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToEvent", userId, eventId)
	ret0, _ := ret[0].(*models.UserEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserToEvent indicates an expected call of AddUserToEvent.
func (mr *MockUserEventRepoMockRecorder) AddUserToEvent(userId, eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToEvent", reflect.TypeOf((*MockUserEventRepo)(nil).AddUserToEvent), userId, eventId)
}

// GetUserFromEvent mocks base method.
func (m *MockUserEventRepo) GetUserFromEvent(userId, eventId int) (*models.UserEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFromEvent", userId, eventId)
	ret0, _ := ret[0].(*models.UserEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFromEvent indicates an expected call of GetUserFromEvent.
func (mr *MockUserEventRepoMockRecorder) GetUserFromEvent(userId, eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFromEvent", reflect.TypeOf((*MockUserEventRepo)(nil).GetUserFromEvent), userId, eventId)
}

// RemoveUserFromEvent mocks base method.
func (m *MockUserEventRepo) RemoveUserFromEvent(userId, eventId int) (*models.UserEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromEvent", userId, eventId)
	ret0, _ := ret[0].(*models.UserEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUserFromEvent indicates an expected call of RemoveUserFromEvent.
func (mr *MockUserEventRepoMockRecorder) RemoveUserFromEvent(userId, eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromEvent", reflect.TypeOf((*MockUserEventRepo)(nil).RemoveUserFromEvent), userId, eventId)
}
