// Code generated by MockGen. DO NOT EDIT.
// Source: event.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"
	time "time"
	models "together-backend/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockEventRepo is a mock of EventRepo interface.
type MockEventRepo struct {
	ctrl     *gomock.Controller
	recorder *MockEventRepoMockRecorder
}

// MockEventRepoMockRecorder is the mock recorder for MockEventRepo.
type MockEventRepoMockRecorder struct {
	mock *MockEventRepo
}

// NewMockEventRepo creates a new mock instance.
func NewMockEventRepo(ctrl *gomock.Controller) *MockEventRepo {
	mock := &MockEventRepo{ctrl: ctrl}
	mock.recorder = &MockEventRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventRepo) EXPECT() *MockEventRepoMockRecorder {
	return m.recorder
}

// CountEvents mocks base method.
func (m *MockEventRepo) CountEvents(userId int, search, qType string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEvents", userId, search, qType)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountEvents indicates an expected call of CountEvents.
func (mr *MockEventRepoMockRecorder) CountEvents(userId, search, qType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEvents", reflect.TypeOf((*MockEventRepo)(nil).CountEvents), userId, search, qType)
}

// CreateEvent mocks base method.
func (m *MockEventRepo) CreateEvent(title, content string, imageUrl []string, createdBy uint64, startTime, endTime time.Time, location int, detailLocation string) (*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", title, content, imageUrl, createdBy, startTime, endTime, location, detailLocation)
	ret0, _ := ret[0].(*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventRepoMockRecorder) CreateEvent(title, content, imageUrl, createdBy, startTime, endTime, location, detailLocation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventRepo)(nil).CreateEvent), title, content, imageUrl, createdBy, startTime, endTime, location, detailLocation)
}

// DeleteEvent mocks base method.
func (m *MockEventRepo) DeleteEvent(event models.Event) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", event)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockEventRepoMockRecorder) DeleteEvent(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockEventRepo)(nil).DeleteEvent), event)
}

// GetEventByEventIdAndCreatedBy mocks base method.
func (m *MockEventRepo) GetEventByEventIdAndCreatedBy(eventId, createdBy int) (models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByEventIdAndCreatedBy", eventId, createdBy)
	ret0, _ := ret[0].(models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByEventIdAndCreatedBy indicates an expected call of GetEventByEventIdAndCreatedBy.
func (mr *MockEventRepoMockRecorder) GetEventByEventIdAndCreatedBy(eventId, createdBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByEventIdAndCreatedBy", reflect.TypeOf((*MockEventRepo)(nil).GetEventByEventIdAndCreatedBy), eventId, createdBy)
}

// GetEventDetail mocks base method.
func (m *MockEventRepo) GetEventDetail(eventId int) (models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventDetail", eventId)
	ret0, _ := ret[0].(models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventDetail indicates an expected call of GetEventDetail.
func (mr *MockEventRepoMockRecorder) GetEventDetail(eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventDetail", reflect.TypeOf((*MockEventRepo)(nil).GetEventDetail), eventId)
}

// GetEvents mocks base method.
func (m *MockEventRepo) GetEvents(page, size, userId int, search, qType string) ([]models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", page, size, userId, search, qType)
	ret0, _ := ret[0].([]models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockEventRepoMockRecorder) GetEvents(page, size, userId, search, qType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockEventRepo)(nil).GetEvents), page, size, userId, search, qType)
}

// UpdateEvent mocks base method.
func (m *MockEventRepo) UpdateEvent(event models.Event, title, content string, imageUrl []string, startTime, endTime time.Time, location int, detailLocation string) (*models.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", event, title, content, imageUrl, startTime, endTime, location, detailLocation)
	ret0, _ := ret[0].(*models.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventRepoMockRecorder) UpdateEvent(event, title, content, imageUrl, startTime, endTime, location, detailLocation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventRepo)(nil).UpdateEvent), event, title, content, imageUrl, startTime, endTime, location, detailLocation)
}
